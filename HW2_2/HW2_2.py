# -*- coding: utf-8 -*-
"""HW2_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xk80lC6O3WFeZ9TxAOa8gSG5hf0-CVTW

## Installing necessary packages
"""
#
# ! pip install biopython
# ! pip install -q condacolab
# import condacolab
# condacolab.install()
# ! conda install -c bioconda seqkit

"""##SeqKit"""

import subprocess

def seqkitf(file):
    seqkit = subprocess.run(("seqkit", "stats", file, "-a"),
                            capture_output=True, text=True)
    if seqkit.stdout.strip() == '':
        return seqkit.stderr.strip()
    else:
        return seqkit.stdout.strip()

"""##Biopython & Database Call"""

from Bio import SeqIO
import re

sequences = SeqIO.parse('hw_file1.fasta', 'fasta')

def get_id(seq):
  ids = []
  for i in seq:
    if not re.match(r'^ENS(?:[A-Z]{3})?([A-Z]{1,2})[0-9]{11}$', i.id):
      if '|' in i.id:
        ids.append(i.id.split('|')[1])
      else:
        ids.append(i.id)
  return ids

fids = get_id(sequences)

import requests
import json

def get_dbInfo(ids):
    uni = r'^[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}$'
    ens = r'^ENS(?:[A-Z]{3})?([A-Z]{1,2})[0-9]{11}$'

    uniprot_ids = []
    ensembl_ids = []

    for id in ids:
        if re.match(uni, id):
            uniprot_ids.append(id)
        elif re.match(ens, id):
            ensembl_ids.append(id)

    parsed_data = []

    if uniprot_ids:
        endpoint = "https://rest.uniprot.org/uniprotkb/accessions"
        params = {'accessions': uniprot_ids}
        response = requests.get(endpoint, params=params).json()
        for val in response["results"]:
            acc = val.get('primaryAccession', '')
            species = val.get('organism', {}).get('scientificName', '')
            gene = val.get('genes', [])
            seq = val.get('sequence', '')
            output = f"Accession: {acc}\n"
            output += f"Organism: {species}\n"
            output += f"Gene Info: {gene}\n"
            output += f"Sequence Info: {seq}\n"
            output += "Type: Protein\n\n"
            parsed_data.append(('Uniprot', output))

    if ensembl_ids:
        server = "https://rest.ensembl.org"
        ext = "/lookup/id"
        headers = {"Content-Type": "application/json", "Accept": "application/json"}
        data = json.dumps({"ids": ensembl_ids})
        response = requests.post(server + ext, headers=headers, data=data).json()
        for gene_id, info in response.items():
            ensembl_output = ""
            for key, value in info.items():
                ensembl_output += f"{key}: {value}\n"
            parsed_data.append(('Ensembl', ensembl_output))

    return parsed_data


ids = fids

"""##Final output"""

file_name = 'hw_file1.fasta' #hw_file2.fasta | hw_file3.fasta
sequences = SeqIO.parse(file_name, 'fasta')

# Display file statistics
print('   File Statistics:')
print()
print(seqkitf(file_name))
print()

# Display sequence descriptions
print("   Sequence Description:")
print()
for index, seq in enumerate(sequences, start=1):
    print(f"Sequence {index}:")
    print("--------------------")
    print(seq)
    print()

# Display information from databases
print("   Info from DB:")
print()
for i, (db, info) in enumerate(get_dbInfo(fids), start=1):
    print(f"Database entry {i}: {db}")
    print("--------------------")
    print(info)