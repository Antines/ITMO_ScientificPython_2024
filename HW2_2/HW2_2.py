# -*- coding: utf-8 -*-
"""HW2_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xk80lC6O3WFeZ9TxAOa8gSG5hf0-CVTW

## Installing necessary packages
"""
# ! pip install biopython
# ! pip install -q condacolab
import condacolab
# condacolab.install()
# ! conda install -c bioconda seqkit
from Bio import SeqIO
import subprocess
import re
import requests
import json

"""##SeqKit"""

def seqkitf(file):
    seqkit = subprocess.run(("seqkit", "stats", file, "-a"),
                            capture_output=True, text=True)
    if "invalid FASTA/Q format" in seqkit.stderr:
        return f"Error: Failed to parse the file with seqkit"
    elif seqkit.stdout.strip() == '':
        return seqkit.stderr.strip()
    else:
        return seqkit.stdout.strip()

"""##Biopython & Database Call"""

def get_id(seq):
    ids = []
    for i in seq:
        if re.match(r'^ENS(?:[A-Z]{3})?([A-Z]{1,2})[0-9]{11}\.?$', i.id):
            ids.append(i.id)
        elif '|' in i.id:
            ids.append(i.id.split('|')[1])
        else:
            ids.append(i.id)
    return ids

def get_dbInfo(ids, file_type):
    parsed_data = []
    uniprot_ids = []
    ensembl_ids = []

    for id in ids:
        if file_type == "Protein":
            uniprot_ids.append(id)
        else:
            ensembl_ids.append(id.split('.')[0])

    if file_type == "Protein":
        endpoint = "https://rest.uniprot.org/uniprotkb/accessions"
        params = {'accessions': uniprot_ids}
        response = requests.get(endpoint, params=params).json()
        for val in response["results"]:
            acc = val.get('primaryAccession', '')
            species = val.get('organism', {}).get('scientificName', '')
            gene = val.get('genes', [])
            seq = val.get('sequence', '')
            output = f"Accession: {acc}\n"
            output += f"Organism: {species}\n"
            output += f"Gene Info: {gene}\n"
            output += f"Sequence Info: {seq}\n"
            output += "Type: Protein\n\n"
            parsed_data.append(('Uniprot', output))

    elif file_type == "DNA":
        server = "https://rest.ensembl.org"
        ext = "/lookup/id"
        headers = {"Content-Type": "application/json", "Accept": "application/json"}
        data = json.dumps({"ids": ensembl_ids})
        response = requests.post(server + ext, headers=headers, data=data).json()
        for gene_id, info in response.items():
            ensembl_output = ""
            for key, value in info.items():
                ensembl_output += f"{key}: {value}\n"
            parsed_data.append(('Ensembl', ensembl_output))

    return parsed_data

"""##Final output"""

def process_fasta_file(file_name):
    seqkit_output = seqkitf(file_name)
    if "Error:" in seqkit_output:
        print("Error:")
        return "Cant parse the file"
    
    sequences = list(SeqIO.parse(file_name, 'fasta'))
    file_type = "Protein" if any('|' in str(sequence.description) for sequence in sequences) else "DNA"
    fids = get_id(sequences)

    print('   File Statistics:')
    print(seqkit_output)
    print()

    print("   Sequence Description:")
    print()
    for index, seq in enumerate(sequences, start=1):
        print(f"Sequence {index}:")
        print("--------------------")
        print(seq)
        print()

    print("   Info from DB:")
    print()
    for i, (db, info) in enumerate(get_dbInfo(fids, file_type), start=1):
        print(f"Database entry {i}: {db}")
        print("--------------------")
        print(info)

process_fasta_file('hw_file1.fasta')  #'hw_file2.fasta' 'hw_file3.fasta'
